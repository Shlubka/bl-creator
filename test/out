go into
node is: source_file
text: fn add(a: i32, b: i32) -> i32 {
    return a + b;
}


fn main() -> io::Result<()> {
    for i in &vec {
        println!("{}", i);
    }

}


normal proces
node is: function_item
text: fn add(a: i32, b: i32) -> i32 {
    return a + b;
}

handle_func
push fn add(a: i32, b: i32) -> i32 {
[LocalVecBlock { type: Start, text: "add", x: 0, y: 0 }]
go into
node is: function_item
text: fn add(a: i32, b: i32) -> i32 {
    return a + b;
}

go into
node is: fn
text: fn

go into
node is: block
text: {
    return a + b;
}

go into
node is: expression_statement
text: return a + b;

skip children
node is: return_expression
text: return a + b

push return
push ctx.blocks.last().
LocalVecBlock { type: End, text: "return a + b", x: 0, y: 0 }

skip children
node is: }
text: }

found closing brecket }
Some(Func)
len of block mass = 1
Handling Func block
normal proces
node is: function_item
text: fn main() -> io::Result<()> {
    for i in &vec {
        println!("{}", i);
    }

}

handle_func
push НАЧАЛО
[LocalVecBlock { type: Start, text: "add", x: 0, y: 0 }, LocalVecBlock { type: End, text: "return a + b", x: 0, y: 0 }, LocalVecBlock { type: End, text: "", x: 0, y: 200 }, LocalVecBlock { type: Start, text: "Начало", x: 0, y: 200 }]
go into
node is: function_item
text: fn main() -> io::Result<()> {
    for i in &vec {
        println!("{}", i);
    }

}

go into
node is: fn
text: fn

go into
node is: block
text: {
    for i in &vec {
        println!("{}", i);
    }

}

go into
node is: expression_statement
text: for i in &vec {
        println!("{}", i);
    }

skip children
node is: for_expression
text: for i in &vec {
        println!("{}", i);
    }

push for
Push new BlockType::Cycle
skip children
node is: }
text: }

found closing brecket }
Some(For(0, 300))
len of block mass = 2
Handling For block at 0:300
!stack contents!
[
    Func,
]
